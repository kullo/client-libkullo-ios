// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from syncer.djinni

#import "KASyncerListener+Private.h"
#import "KASyncerListener.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "KADraftPart+Private.h"
#import "KANetworkError+Private.h"
#import "KASyncProgress+Private.h"
#include <stdexcept>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace ObjCpp { namespace Kullo { namespace Api {

class SyncerListener::ObjcProxy final
: public ::Kullo::Api::SyncerListener
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::ObjCpp::Kullo::Api::SyncerListener;
public:
    using ObjcProxyBase::ObjcProxyBase;
    void started() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() started];
        }
    }
    void draftPartTooBig(int64_t c_convId, ::Kullo::Api::DraftPart c_part, int64_t c_currentSize, int64_t c_maxSize) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() draftPartTooBig:(::djinni::I64::fromCpp(c_convId))
                                                                 part:(::djinni::Enum<::Kullo::Api::DraftPart, KADraftPart>::fromCpp(c_part))
                                                          currentSize:(::djinni::I64::fromCpp(c_currentSize))
                                                              maxSize:(::djinni::I64::fromCpp(c_maxSize))];
        }
    }
    void progressed(const ::Kullo::Api::SyncProgress & c_progress) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() progressed:(::ObjCpp::Kullo::Api::SyncProgress::fromCpp(c_progress))];
        }
    }
    void finished() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() finished];
        }
    }
    void error(::Kullo::Api::NetworkError c_error) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() error:(::djinni::Enum<::Kullo::Api::NetworkError, KANetworkError>::fromCpp(c_error))];
        }
    }
};

} } }  // namespace ObjCpp::Kullo::Api

namespace ObjCpp { namespace Kullo { namespace Api {

auto SyncerListener::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto SyncerListener::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).djinni_private_get_proxied_objc_object();
}

} } }  // namespace ObjCpp::Kullo::Api
