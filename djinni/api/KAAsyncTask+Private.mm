// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from asynctask.djinni

#import "KAAsyncTask+Private.h"
#import "KAAsyncTask.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface KAAsyncTask ()

- (id)initWithCpp:(const std::shared_ptr<::Kullo::Api::AsyncTask>&)cppRef;

@end

@implementation KAAsyncTask {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::Kullo::Api::AsyncTask>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::Kullo::Api::AsyncTask>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)cancel {
    try {
        _cppRefHandle.get()->cancel();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isDone {
    try {
        auto r = _cppRefHandle.get()->isDone();
        return ::djinni::Bool::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)waitUntilDone {
    try {
        _cppRefHandle.get()->waitUntilDone();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)waitForMs:(int32_t)timeout {
    try {
        auto r = _cppRefHandle.get()->waitForMs(::djinni::I32::toCpp(timeout));
        return ::djinni::Bool::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace ObjCpp { namespace Kullo { namespace Api {

auto AsyncTask::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto AsyncTask::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<KAAsyncTask>(cpp);
}

} } }  // namespace ObjCpp::Kullo::Api

@end
