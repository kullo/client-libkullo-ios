// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from masterkey.djinni

#import "KAMasterKeyHelpers+Private.h"
#import "KAMasterKeyHelpers.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "KAMasterKeyBase+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface KAMasterKeyHelpers ()

- (id)initWithCpp:(const std::shared_ptr<::Kullo::Api::MasterKeyHelpers>&)cppRef;

@end

@implementation KAMasterKeyHelpers {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::Kullo::Api::MasterKeyHelpers>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::Kullo::Api::MasterKeyHelpers>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable KAMasterKey *)createFromPem:(nonnull NSString *)pem {
    try {
        auto objcpp_result_ = ::Kullo::Api::MasterKeyHelpers::createFromPem(::djinni::String::toCpp(pem));
        return ::djinni::Optional<boost::optional, ::ObjCpp::Kullo::Api::MasterKey>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable KAMasterKey *)createFromDataBlocks:(nonnull NSArray<NSString *> *)dataBlocks {
    try {
        auto objcpp_result_ = ::Kullo::Api::MasterKeyHelpers::createFromDataBlocks(::djinni::List<::djinni::String>::toCpp(dataBlocks));
        return ::djinni::Optional<boost::optional, ::ObjCpp::Kullo::Api::MasterKey>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (BOOL)isValidBlock:(nonnull NSString *)block {
    try {
        auto objcpp_result_ = ::Kullo::Api::MasterKeyHelpers::isValidBlock(::djinni::String::toCpp(block));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull NSString *)toPem:(nonnull KAMasterKey *)masterKey {
    try {
        auto objcpp_result_ = ::Kullo::Api::MasterKeyHelpers::toPem(::ObjCpp::Kullo::Api::MasterKey::toCpp(masterKey));
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull NSString *)encrypt:(nonnull NSString *)password
                    masterKey:(nonnull KAMasterKey *)masterKey {
    try {
        auto objcpp_result_ = ::Kullo::Api::MasterKeyHelpers::encrypt(::djinni::String::toCpp(password),
                                                                      ::ObjCpp::Kullo::Api::MasterKey::toCpp(masterKey));
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable KAMasterKey *)decrypt:(nonnull NSString *)password
               encryptedMasterKey:(nonnull NSString *)encryptedMasterKey {
    try {
        auto objcpp_result_ = ::Kullo::Api::MasterKeyHelpers::decrypt(::djinni::String::toCpp(password),
                                                                      ::djinni::String::toCpp(encryptedMasterKey));
        return ::djinni::Optional<boost::optional, ::ObjCpp::Kullo::Api::MasterKey>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace ObjCpp { namespace Kullo { namespace Api {

auto MasterKeyHelpers::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        throw std::invalid_argument("MasterKeyHelpers::toCpp requires non-nil object");
    }
    return kulloForcedNn(objc->_cppRefHandle.get());
}

auto MasterKeyHelpers::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<KAMasterKeyHelpers>(cpp);
}

} } }  // namespace ObjCpp::Kullo::Api

@end
