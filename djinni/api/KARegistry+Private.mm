// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from registry.djinni

#import "KARegistry+Private.h"
#import "KARegistry.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "KALogListener+Private.h"
#import "KATaskRunner+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface KARegistry ()

- (id)initWithCpp:(const std::shared_ptr<::Kullo::Api::Registry>&)cppRef;

@end

@implementation KARegistry {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::Kullo::Api::Registry>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::Kullo::Api::Registry>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (void)setLogListener:(nullable id<KALogListener>)listener {
    try {
        ::Kullo::Api::Registry::setLogListener(::djinni::Optional<boost::optional, ::ObjCpp::Kullo::Api::LogListener>::toCpp(listener));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setTaskRunner:(nullable id<KATaskRunner>)taskRunner {
    try {
        ::Kullo::Api::Registry::setTaskRunner(::ObjCpp::Kullo::Api::TaskRunner::toCpp(taskRunner));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace ObjCpp { namespace Kullo { namespace Api {

auto Registry::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Registry::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<KARegistry>(cpp);
}

} } }  // namespace ObjCpp::Kullo::Api

@end
