// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from drafts.djinni

#import "KADrafts+Private.h"
#import "KADrafts.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "KADraftState+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface KADrafts ()

- (id)initWithCpp:(const std::shared_ptr<::Kullo::Api::Drafts>&)cppRef;

@end

@implementation KADrafts {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::Kullo::Api::Drafts>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::Kullo::Api::Drafts>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull NSString *)text:(int64_t)convId {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->text(::djinni::I64::toCpp(convId));
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setText:(int64_t)convId
           text:(nonnull NSString *)text {
    try {
        _cppRefHandle.get()->setText(::djinni::I64::toCpp(convId),
                                     ::djinni::String::toCpp(text));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (KADraftState)state:(int64_t)convId {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->state(::djinni::I64::toCpp(convId));
        return ::djinni::Enum<::Kullo::Api::DraftState, KADraftState>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)prepareToSend:(int64_t)convId {
    try {
        _cppRefHandle.get()->prepareToSend(::djinni::I64::toCpp(convId));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)clear:(int64_t)convId {
    try {
        _cppRefHandle.get()->clear(::djinni::I64::toCpp(convId));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace ObjCpp { namespace Kullo { namespace Api {

auto Drafts::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        throw std::invalid_argument("Drafts::toCpp requires non-nil object");
    }
    return kulloForcedNn(objc->_cppRefHandle.get());
}

auto Drafts::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<KADrafts>(cpp);
}

} } }  // namespace ObjCpp::Kullo::Api

@end
