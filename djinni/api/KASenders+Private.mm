// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from senders.djinni

#import "KASenders+Private.h"
#import "KASenders.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "KAAddress+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface KASenders ()

- (id)initWithCpp:(const std::shared_ptr<::Kullo::Api::Senders>&)cppRef;

@end

@implementation KASenders {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::Kullo::Api::Senders>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::Kullo::Api::Senders>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull NSString *)name:(int64_t)msgId {
    try {
        auto r = _cppRefHandle.get()->name(::djinni::I64::toCpp(msgId));
        return ::djinni::String::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable KAAddress *)address:(int64_t)msgId {
    try {
        auto r = _cppRefHandle.get()->address(::djinni::I64::toCpp(msgId));
        return ::djinni::Optional<boost::optional, ::ObjCpp::Kullo::Api::Address>::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)organization:(int64_t)msgId {
    try {
        auto r = _cppRefHandle.get()->organization(::djinni::I64::toCpp(msgId));
        return ::djinni::String::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)avatarMimeType:(int64_t)msgId {
    try {
        auto r = _cppRefHandle.get()->avatarMimeType(::djinni::I64::toCpp(msgId));
        return ::djinni::String::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSData *)avatar:(int64_t)msgId {
    try {
        auto r = _cppRefHandle.get()->avatar(::djinni::I64::toCpp(msgId));
        return ::djinni::Binary::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace ObjCpp { namespace Kullo { namespace Api {

auto Senders::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Senders::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<KASenders>(cpp);
}

} } }  // namespace ObjCpp::Kullo::Api

@end
