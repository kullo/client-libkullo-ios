// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from messages.djinni

#import "KAMessageAttachments+Private.h"
#import "KAMessageAttachments.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "KAAsyncTask+Private.h"
#import "KAMessageAttachmentsContentListener+Private.h"
#import "KAMessageAttachmentsSaveToListener+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface KAMessageAttachments ()

- (id)initWithCpp:(const std::shared_ptr<::Kullo::Api::MessageAttachments>&)cppRef;

@end

@implementation KAMessageAttachments {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::Kullo::Api::MessageAttachments>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::Kullo::Api::MessageAttachments>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull NSArray<NSNumber *> *)allForMessage:(int64_t)msgId {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->allForMessage(::djinni::I64::toCpp(msgId));
        return ::djinni::List<::djinni::I64>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)allAttachmentsDownloaded:(int64_t)msgId {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->allAttachmentsDownloaded(::djinni::I64::toCpp(msgId));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)filename:(int64_t)msgId
                         attId:(int64_t)attId {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->filename(::djinni::I64::toCpp(msgId),
                                                            ::djinni::I64::toCpp(attId));
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)mimeType:(int64_t)msgId
                         attId:(int64_t)attId {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->mimeType(::djinni::I64::toCpp(msgId),
                                                            ::djinni::I64::toCpp(attId));
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int64_t)size:(int64_t)msgId
          attId:(int64_t)attId {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->size(::djinni::I64::toCpp(msgId),
                                                        ::djinni::I64::toCpp(attId));
        return ::djinni::I64::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)hash:(int64_t)msgId
                     attId:(int64_t)attId {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->hash(::djinni::I64::toCpp(msgId),
                                                        ::djinni::I64::toCpp(attId));
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable KAAsyncTask *)contentAsync:(int64_t)msgId
                                 attId:(int64_t)attId
                              listener:(nullable id<KAMessageAttachmentsContentListener>)listener {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->contentAsync(::djinni::I64::toCpp(msgId),
                                                                ::djinni::I64::toCpp(attId),
                                                                ::ObjCpp::Kullo::Api::MessageAttachmentsContentListener::toCpp(listener));
        return ::ObjCpp::Kullo::Api::AsyncTask::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable KAAsyncTask *)saveToAsync:(int64_t)msgId
                                attId:(int64_t)attId
                                 path:(nonnull NSString *)path
                             listener:(nullable id<KAMessageAttachmentsSaveToListener>)listener {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->saveToAsync(::djinni::I64::toCpp(msgId),
                                                               ::djinni::I64::toCpp(attId),
                                                               ::djinni::String::toCpp(path),
                                                               ::ObjCpp::Kullo::Api::MessageAttachmentsSaveToListener::toCpp(listener));
        return ::ObjCpp::Kullo::Api::AsyncTask::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace ObjCpp { namespace Kullo { namespace Api {

auto MessageAttachments::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto MessageAttachments::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<KAMessageAttachments>(cpp);
}

} } }  // namespace ObjCpp::Kullo::Api

@end
