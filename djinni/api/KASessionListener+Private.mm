// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from api.djinni

#import "KASessionListener+Private.h"
#import "KASessionListener.h"
#import "DJIObjcWrapperCache+Private.h"
#import "KAInternalEvent+Private.h"

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace ObjCpp { namespace Kullo { namespace Api {

class SessionListener::ObjcProxy final
: public ::Kullo::Api::SessionListener
, public ::djinni::DbxObjcWrapperCache<ObjcProxy>::Handle
{
public:
    using Handle::Handle;
    void internalEvent(const std::shared_ptr<::Kullo::Api::InternalEvent> & c_event) override
    {
        @autoreleasepool {
            [(ObjcType)Handle::get() internalEvent:(::ObjCpp::Kullo::Api::InternalEvent::fromCpp(c_event))];
        }
    }
};

} } }  // namespace ObjCpp::Kullo::Api

namespace ObjCpp { namespace Kullo { namespace Api {

auto SessionListener::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return ::djinni::DbxObjcWrapperCache<ObjcProxy>::getInstance()->get(objc);
}

auto SessionListener::fromCpp(const CppType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).Handle::get();
}

} } }  // namespace ObjCpp::Kullo::Api
