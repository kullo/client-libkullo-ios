// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from session.djinni

#import "KASessionListener+Private.h"
#import "KASessionListener.h"
#import "DJIObjcWrapperCache+Private.h"
#import "KAInternalEvent+Private.h"
#include <stdexcept>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace ObjCpp { namespace Kullo { namespace Api {

class SessionListener::ObjcProxy final
: public ::Kullo::Api::SessionListener
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::ObjCpp::Kullo::Api::SessionListener;
public:
    using ObjcProxyBase::ObjcProxyBase;
    void internalEvent(const ::Kullo::nn_shared_ptr<::Kullo::Api::InternalEvent> & c_event) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() internalEvent:(::ObjCpp::Kullo::Api::InternalEvent::fromCpp(c_event))];
        }
    }
};

} } }  // namespace ObjCpp::Kullo::Api

namespace ObjCpp { namespace Kullo { namespace Api {

auto SessionListener::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        throw std::invalid_argument("SessionListener::toCpp requires non-nil object");
    }
    return kulloForcedNn(::djinni::get_objc_proxy<ObjcProxy>(objc));
}

auto SessionListener::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).djinni_private_get_proxied_objc_object();
}

} } }  // namespace ObjCpp::Kullo::Api
