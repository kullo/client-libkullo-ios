// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from syncer.djinni

#import "KASyncer+Private.h"
#import "KASyncer.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "KADateTimeBase+Private.h"
#import "KASyncerListener+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface KASyncer ()

- (id)initWithCpp:(const std::shared_ptr<::Kullo::Api::Syncer>&)cppRef;

@end

@implementation KASyncer {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::Kullo::Api::Syncer>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::Kullo::Api::Syncer>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)setListener:(nullable id<KASyncerListener>)listener {
    try {
        _cppRefHandle.get()->setListener(::ObjCpp::Kullo::Api::SyncerListener::toCpp(listener));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable KADateTime *)lastFullSync {
    try {
        auto r = _cppRefHandle.get()->lastFullSync();
        return ::djinni::Optional<boost::optional, ::ObjCpp::Kullo::Api::DateTime>::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)requestSync:(KASyncMode)mode {
    try {
        _cppRefHandle.get()->requestSync(::djinni::Enum<::Kullo::Api::SyncMode, KASyncMode>::toCpp(mode));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)requestDownloadingAttachmentsForMessage:(int64_t)msgId {
    try {
        _cppRefHandle.get()->requestDownloadingAttachmentsForMessage(::djinni::I64::toCpp(msgId));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)cancel {
    try {
        _cppRefHandle.get()->cancel();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isSyncing {
    try {
        auto r = _cppRefHandle.get()->isSyncing();
        return ::djinni::Bool::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)waitUntilDone {
    try {
        _cppRefHandle.get()->waitUntilDone();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)waitForMs:(int32_t)timeout {
    try {
        auto r = _cppRefHandle.get()->waitForMs(::djinni::I32::toCpp(timeout));
        return ::djinni::Bool::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace ObjCpp { namespace Kullo { namespace Api {

auto Syncer::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Syncer::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<KASyncer>(cpp);
}

} } }  // namespace ObjCpp::Kullo::Api

@end
