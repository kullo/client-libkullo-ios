// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from registration.djinni

#import "KARegistration+Private.h"
#import "KARegistration.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "KAAddressBase+Private.h"
#import "KAAsyncTask+Private.h"
#import "KAChallenge+Private.h"
#import "KARegistrationRegisterAccountListener+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface KARegistration ()

- (id)initWithCpp:(const std::shared_ptr<::Kullo::Api::Registration>&)cppRef;

@end

@implementation KARegistration {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::Kullo::Api::Registration>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::Kullo::Api::Registration>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull KAAsyncTask *)registerAccountAsync:(nonnull KAAddress *)address
                                acceptedTerms:(nullable NSString *)acceptedTerms
                                    challenge:(nullable KAChallenge *)challenge
                              challengeAnswer:(nonnull NSString *)challengeAnswer
                                     listener:(nonnull id<KARegistrationRegisterAccountListener>)listener {
    try {
        if (listener == nil) {
            throw std::invalid_argument("Got unexpected null parameter 'listener' to function KARegistration - (nonnull KAAsyncTask *)registerAccountAsync:(nonnull KAAddress *)address acceptedTerms:(nullable NSString *)acceptedTerms challenge:(nullable KAChallenge *)challenge challengeAnswer:(nonnull NSString *)challengeAnswer listener:(nonnull id<KARegistrationRegisterAccountListener>)listener");
        }
        auto objcpp_result_ = _cppRefHandle.get()->registerAccountAsync(::ObjCpp::Kullo::Api::Address::toCpp(address),
                                                                        ::djinni::Optional<boost::optional, ::djinni::String>::toCpp(acceptedTerms),
                                                                        ::djinni::Optional<boost::optional, ::ObjCpp::Kullo::Api::Challenge>::toCpp(challenge),
                                                                        ::djinni::String::toCpp(challengeAnswer),
                                                                        ::ObjCpp::Kullo::Api::RegistrationRegisterAccountListener::toCpp(listener));
        return ::ObjCpp::Kullo::Api::AsyncTask::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace ObjCpp { namespace Kullo { namespace Api {

auto Registration::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        throw std::invalid_argument("Registration::toCpp requires non-nil object");
    }
    return kulloForcedNn(objc->_cppRefHandle.get());
}

auto Registration::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<KARegistration>(cpp);
}

} } }  // namespace ObjCpp::Kullo::Api

@end
