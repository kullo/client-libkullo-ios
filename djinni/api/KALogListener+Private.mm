// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from log.djinni

#import "KALogListener+Private.h"
#import "KALogListener.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace ObjCpp { namespace Kullo { namespace Api {

class LogListener::ObjcProxy final
: public ::Kullo::Api::LogListener
, public ::djinni::ObjcProxyCache::Handle<ObjcType>
{
public:
    using Handle::Handle;
    void writeLogMessage(const std::string & c_file, int32_t c_line, const std::string & c_function, ::Kullo::Api::LogType c_type, const std::string & c_message, const std::string & c_thread, const std::string & c_stacktrace) override
    {
        @autoreleasepool {
            [Handle::get() writeLogMessage:(::djinni::String::fromCpp(c_file))
                                      line:(::djinni::I32::fromCpp(c_line))
                                  function:(::djinni::String::fromCpp(c_function))
                                      type:(::djinni::Enum<::Kullo::Api::LogType, KALogType>::fromCpp(c_type))
                                   message:(::djinni::String::fromCpp(c_message))
                                    thread:(::djinni::String::fromCpp(c_thread))
                                stacktrace:(::djinni::String::fromCpp(c_stacktrace))];
        }
    }
};

} } }  // namespace ObjCpp::Kullo::Api

namespace ObjCpp { namespace Kullo { namespace Api {

auto LogListener::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto LogListener::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).Handle::get();
}

} } }  // namespace ObjCpp::Kullo::Api
