// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from api.djinni

#import "KAMessageAttachmentsContentListener+Private.h"
#import "KAMessageAttachmentsContentListener.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace ObjCpp { namespace Kullo { namespace Api {

class MessageAttachmentsContentListener::ObjcProxy final
: public ::Kullo::Api::MessageAttachmentsContentListener
, public ::djinni::DbxObjcWrapperCache<ObjcProxy>::Handle
{
public:
    using Handle::Handle;
    void finished(int64_t c_msgId, int64_t c_attId, const std::vector<uint8_t> & c_content) override
    {
        @autoreleasepool {
            [(ObjcType)Handle::get() finished:(::djinni::I64::fromCpp(c_msgId))
                                        attId:(::djinni::I64::fromCpp(c_attId))
                                      content:(::djinni::Binary::fromCpp(c_content))];
        }
    }
};

} } }  // namespace ObjCpp::Kullo::Api

namespace ObjCpp { namespace Kullo { namespace Api {

auto MessageAttachmentsContentListener::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return ::djinni::DbxObjcWrapperCache<ObjcProxy>::getInstance()->get(objc);
}

auto MessageAttachmentsContentListener::fromCpp(const CppType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).Handle::get();
}

} } }  // namespace ObjCpp::Kullo::Api
