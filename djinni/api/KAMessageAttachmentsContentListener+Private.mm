// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from messages.djinni

#import "KAMessageAttachmentsContentListener+Private.h"
#import "KAMessageAttachmentsContentListener.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#include <stdexcept>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace ObjCpp { namespace Kullo { namespace Api {

class MessageAttachmentsContentListener::ObjcProxy final
: public ::Kullo::Api::MessageAttachmentsContentListener
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::ObjCpp::Kullo::Api::MessageAttachmentsContentListener;
public:
    using ObjcProxyBase::ObjcProxyBase;
    void finished(int64_t c_msgId, int64_t c_attId, const std::vector<uint8_t> & c_content) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() finished:(::djinni::I64::fromCpp(c_msgId))
                                                         attId:(::djinni::I64::fromCpp(c_attId))
                                                       content:(::djinni::Binary::fromCpp(c_content))];
        }
    }
};

} } }  // namespace ObjCpp::Kullo::Api

namespace ObjCpp { namespace Kullo { namespace Api {

auto MessageAttachmentsContentListener::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        throw std::invalid_argument("MessageAttachmentsContentListener::toCpp requires non-nil object");
    }
    return kulloForcedNn(::djinni::get_objc_proxy<ObjcProxy>(objc));
}

auto MessageAttachmentsContentListener::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).djinni_private_get_proxied_objc_object();
}

} } }  // namespace ObjCpp::Kullo::Api
