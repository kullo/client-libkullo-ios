// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from taskrunner.djinni

#import "KATaskRunner+Private.h"
#import "KATaskRunner.h"
#import "DJIObjcWrapperCache+Private.h"
#import "KATask+Private.h"
#include <stdexcept>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace ObjCpp { namespace Kullo { namespace Api {

class TaskRunner::ObjcProxy final
: public ::Kullo::Api::TaskRunner
, public ::djinni::ObjcProxyCache::Handle<ObjcType>
{
public:
    using Handle::Handle;
    void runTaskAsync(const std::shared_ptr<::Kullo::Api::Task> & c_task) override
    {
        @autoreleasepool {
            [Handle::get() runTaskAsync:(::ObjCpp::Kullo::Api::Task::fromCpp(c_task))];
        }
    }
};

} } }  // namespace ObjCpp::Kullo::Api

namespace ObjCpp { namespace Kullo { namespace Api {

auto TaskRunner::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto TaskRunner::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).Handle::get();
}

} } }  // namespace ObjCpp::Kullo::Api
