// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from session.djinni

#import "KASessionAccountInfoListener+Private.h"
#import "KASessionAccountInfoListener.h"
#import "DJIObjcWrapperCache+Private.h"
#import "KAAccountInfo+Private.h"
#import "KANetworkError+Private.h"
#include <stdexcept>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace ObjCpp { namespace Kullo { namespace Api {

class SessionAccountInfoListener::ObjcProxy final
: public ::Kullo::Api::SessionAccountInfoListener
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::ObjCpp::Kullo::Api::SessionAccountInfoListener;
public:
    using ObjcProxyBase::ObjcProxyBase;
    void finished(const ::Kullo::Api::AccountInfo & c_accountInfo) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() finished:(::ObjCpp::Kullo::Api::AccountInfo::fromCpp(c_accountInfo))];
        }
    }
    void error(::Kullo::Api::NetworkError c_error) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() error:(::djinni::Enum<::Kullo::Api::NetworkError, KANetworkError>::fromCpp(c_error))];
        }
    }
};

} } }  // namespace ObjCpp::Kullo::Api

namespace ObjCpp { namespace Kullo { namespace Api {

auto SessionAccountInfoListener::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        throw std::invalid_argument("SessionAccountInfoListener::toCpp requires non-nil object");
    }
    return kulloForcedNn(::djinni::get_objc_proxy<ObjcProxy>(objc));
}

auto SessionAccountInfoListener::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).djinni_private_get_proxied_objc_object();
}

} } }  // namespace ObjCpp::Kullo::Api
