// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from masterkey.djinni

#import "KAMasterKey+Private.h"
#import "KAMasterKey.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface KAMasterKey ()

- (id)initWithCpp:(const std::shared_ptr<::Kullo::Api::MasterKey>&)cppRef;

@end

@implementation KAMasterKey {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::Kullo::Api::MasterKey>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::Kullo::Api::MasterKey>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable KAMasterKey *)createFromPem:(nonnull NSString *)pem {
    try {
        auto objcpp_result_ = ::Kullo::Api::MasterKey::createFromPem(::djinni::String::toCpp(pem));
        return ::djinni::Optional<boost::optional, ::ObjCpp::Kullo::Api::MasterKey>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable KAMasterKey *)createFromDataBlocks:(nonnull NSArray<NSString *> *)dataBlocks {
    try {
        auto objcpp_result_ = ::Kullo::Api::MasterKey::createFromDataBlocks(::djinni::List<::djinni::String>::toCpp(dataBlocks));
        return ::djinni::Optional<boost::optional, ::ObjCpp::Kullo::Api::MasterKey>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (BOOL)isValidBlock:(nonnull NSString *)block {
    try {
        auto objcpp_result_ = ::Kullo::Api::MasterKey::isValidBlock(::djinni::String::toCpp(block));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)pem {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->pem();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<NSString *> *)dataBlocks {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->dataBlocks();
        return ::djinni::List<::djinni::String>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isEqualTo:(nullable KAMasterKey *)other {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->isEqualTo(::ObjCpp::Kullo::Api::MasterKey::toCpp(other));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace ObjCpp { namespace Kullo { namespace Api {

auto MasterKey::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto MasterKey::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<KAMasterKey>(cpp);
}

} } }  // namespace ObjCpp::Kullo::Api

@end
