// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from api.djinni

#import "KASyncerRunListener+Private.h"
#import "KASyncerRunListener.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace ObjCpp { namespace Kullo { namespace Api {

class SyncerRunListener::ObjcProxy final
: public ::Kullo::Api::SyncerRunListener
, public ::djinni::DbxObjcWrapperCache<ObjcProxy>::Handle
{
public:
    using Handle::Handle;
    void draftAttachmentsTooBig(int64_t c_convId) override
    {
        @autoreleasepool {
            [(ObjcType)Handle::get() draftAttachmentsTooBig:(::djinni::I64::fromCpp(c_convId))];
        }
    }
    void finished() override
    {
        @autoreleasepool {
            [(ObjcType)Handle::get() finished];
        }
    }
    void error(::Kullo::Api::NetworkError c_error) override
    {
        @autoreleasepool {
            [(ObjcType)Handle::get() error:(::djinni::Enum<::Kullo::Api::NetworkError, KANetworkError>::fromCpp(c_error))];
        }
    }
};

} } }  // namespace ObjCpp::Kullo::Api

namespace ObjCpp { namespace Kullo { namespace Api {

auto SyncerRunListener::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return ::djinni::DbxObjcWrapperCache<ObjcProxy>::getInstance()->get(objc);
}

auto SyncerRunListener::fromCpp(const CppType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).Handle::get();
}

} } }  // namespace ObjCpp::Kullo::Api
