// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from session.djinni

#import "KASession+Private.h"
#import "KASession.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "KAAsyncTask+Private.h"
#import "KAConversations+Private.h"
#import "KADraftAttachments+Private.h"
#import "KADrafts+Private.h"
#import "KAEvent+Private.h"
#import "KAInternalEvent+Private.h"
#import "KAMessageAttachments+Private.h"
#import "KAMessages+Private.h"
#import "KAPushToken+Private.h"
#import "KASenders+Private.h"
#import "KASessionAccountInfoListener+Private.h"
#import "KASyncer+Private.h"
#import "KAUserSettings+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface KASession ()

- (id)initWithCpp:(const std::shared_ptr<::Kullo::Api::Session>&)cppRef;

@end

@implementation KASession {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::Kullo::Api::Session>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::Kullo::Api::Session>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull KAUserSettings *)userSettings {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->userSettings();
        return ::ObjCpp::Kullo::Api::UserSettings::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull KAConversations *)conversations {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->conversations();
        return ::ObjCpp::Kullo::Api::Conversations::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull KAMessages *)messages {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->messages();
        return ::ObjCpp::Kullo::Api::Messages::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull KAMessageAttachments *)messageAttachments {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->messageAttachments();
        return ::ObjCpp::Kullo::Api::MessageAttachments::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull KASenders *)senders {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->senders();
        return ::ObjCpp::Kullo::Api::Senders::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull KADrafts *)drafts {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->drafts();
        return ::ObjCpp::Kullo::Api::Drafts::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull KADraftAttachments *)draftAttachments {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->draftAttachments();
        return ::ObjCpp::Kullo::Api::DraftAttachments::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull KASyncer *)syncer {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->syncer();
        return ::ObjCpp::Kullo::Api::Syncer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull KAAsyncTask *)accountInfoAsync:(nonnull id<KASessionAccountInfoListener>)listener {
    try {
        if (listener == nil) {
            throw std::invalid_argument("Got unexpected null parameter 'listener' to function KASession - (nonnull KAAsyncTask *)accountInfoAsync:(nonnull id<KASessionAccountInfoListener>)listener");
        }
        auto objcpp_result_ = _cppRefHandle.get()->accountInfoAsync(::ObjCpp::Kullo::Api::SessionAccountInfoListener::toCpp(listener));
        return ::ObjCpp::Kullo::Api::AsyncTask::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull KAAsyncTask *)registerPushToken:(nonnull KAPushToken *)token {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->registerPushToken(::ObjCpp::Kullo::Api::PushToken::toCpp(token));
        return ::ObjCpp::Kullo::Api::AsyncTask::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull KAAsyncTask *)unregisterPushToken:(nonnull KAPushToken *)token {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->unregisterPushToken(::ObjCpp::Kullo::Api::PushToken::toCpp(token));
        return ::ObjCpp::Kullo::Api::AsyncTask::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<KAEvent *> *)notify:(nonnull KAInternalEvent *)internalEvent {
    try {
        if (internalEvent == nil) {
            throw std::invalid_argument("Got unexpected null parameter 'internalEvent' to function KASession - (nonnull NSArray<KAEvent *> *)notify:(nonnull KAInternalEvent *)internalEvent");
        }
        auto objcpp_result_ = _cppRefHandle.get()->notify(::ObjCpp::Kullo::Api::InternalEvent::toCpp(internalEvent));
        return ::djinni::List<::ObjCpp::Kullo::Api::Event>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace ObjCpp { namespace Kullo { namespace Api {

auto Session::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        throw std::invalid_argument("Session::toCpp requires non-nil object");
    }
    return kulloForcedNn(objc->_cppRefHandle.get());
}

auto Session::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<KASession>(cpp);
}

} } }  // namespace ObjCpp::Kullo::Api

@end
