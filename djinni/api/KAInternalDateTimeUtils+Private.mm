// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from datetime.djinni

#import "KAInternalDateTimeUtils+Private.h"
#import "KAInternalDateTimeUtils.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "KADateTimeBase+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface KAInternalDateTimeUtils ()

- (id)initWithCpp:(const std::shared_ptr<::Kullo::Api::InternalDateTimeUtils>&)cppRef;

@end

@implementation KAInternalDateTimeUtils {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::Kullo::Api::InternalDateTimeUtils>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::Kullo::Api::InternalDateTimeUtils>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (BOOL)isValid:(int16_t)year
          month:(int8_t)month
            day:(int8_t)day
           hour:(int8_t)hour
         minute:(int8_t)minute
         second:(int8_t)second
tzOffsetMinutes:(int16_t)tzOffsetMinutes {
    try {
        auto objcpp_result_ = ::Kullo::Api::InternalDateTimeUtils::isValid(::djinni::I16::toCpp(year),
                                                                           ::djinni::I8::toCpp(month),
                                                                           ::djinni::I8::toCpp(day),
                                                                           ::djinni::I8::toCpp(hour),
                                                                           ::djinni::I8::toCpp(minute),
                                                                           ::djinni::I8::toCpp(second),
                                                                           ::djinni::I16::toCpp(tzOffsetMinutes));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull KADateTime *)nowUtc {
    try {
        auto objcpp_result_ = ::Kullo::Api::InternalDateTimeUtils::nowUtc();
        return ::ObjCpp::Kullo::Api::DateTime::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull NSString *)toString:(nonnull KADateTime *)dateTime {
    try {
        auto objcpp_result_ = ::Kullo::Api::InternalDateTimeUtils::toString(::ObjCpp::Kullo::Api::DateTime::toCpp(dateTime));
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (int8_t)compare:(nonnull KADateTime *)lhs
              rhs:(nonnull KADateTime *)rhs {
    try {
        auto objcpp_result_ = ::Kullo::Api::InternalDateTimeUtils::compare(::ObjCpp::Kullo::Api::DateTime::toCpp(lhs),
                                                                           ::ObjCpp::Kullo::Api::DateTime::toCpp(rhs));
        return ::djinni::I8::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace ObjCpp { namespace Kullo { namespace Api {

auto InternalDateTimeUtils::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto InternalDateTimeUtils::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<KAInternalDateTimeUtils>(cpp);
}

} } }  // namespace ObjCpp::Kullo::Api

@end
