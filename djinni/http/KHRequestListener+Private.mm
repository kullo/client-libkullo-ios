// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from http.djinni

#import "KHRequestListener+Private.h"
#import "KHRequestListener.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface KHRequestListener ()

- (id)initWithCpp:(const std::shared_ptr<::Kullo::Http::RequestListener>&)cppRef;

@end

@implementation KHRequestListener {
    ::djinni::DbxCppWrapperCache<::Kullo::Http::RequestListener>::Handle _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::Kullo::Http::RequestListener>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull NSData *)read:(int64_t)maxSize {
    try {
        auto r = _cppRefHandle.get()->read(::djinni::I64::toCpp(maxSize));
        return ::djinni::Binary::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace ObjCpp { namespace Kullo { namespace Http {

auto RequestListener::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto RequestListener::fromCpp(const CppType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::DbxCppWrapperCache<::Kullo::Http::RequestListener>::getInstance()->get(cpp, [] (const CppType& p) {
        return [[KHRequestListener alloc] initWithCpp:p];
    });
}

} } }  // namespace ObjCpp::Kullo::Http

@end
