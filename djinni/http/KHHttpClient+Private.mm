// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from http.djinni

#import "KHHttpClient+Private.h"
#import "KHHttpClient.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "KHRequest+Private.h"
#import "KHRequestListener+Private.h"
#import "KHResponse+Private.h"
#import "KHResponseListener+Private.h"

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace ObjCpp { namespace Kullo { namespace Http {

class HttpClient::ObjcProxy final
: public ::Kullo::Http::HttpClient
, public ::djinni::ObjcProxyCache::Handle<ObjcType>
{
public:
    using Handle::Handle;
    ::Kullo::Http::Response sendRequest(const ::Kullo::Http::Request & c_request, int64_t c_timeout, const std::shared_ptr<::Kullo::Http::RequestListener> & c_requestListener, const std::shared_ptr<::Kullo::Http::ResponseListener> & c_responseListener) override
    {
        @autoreleasepool {
            auto r = [Handle::get() sendRequest:(::ObjCpp::Kullo::Http::Request::fromCpp(c_request))
                                        timeout:(::djinni::I64::fromCpp(c_timeout))
                                requestListener:(::djinni::Optional<boost::optional, ::ObjCpp::Kullo::Http::RequestListener>::fromCpp(c_requestListener))
                               responseListener:(::djinni::Optional<boost::optional, ::ObjCpp::Kullo::Http::ResponseListener>::fromCpp(c_responseListener))];
            return ::ObjCpp::Kullo::Http::Response::toCpp(r);
        }
    }
};

} } }  // namespace ObjCpp::Kullo::Http

namespace ObjCpp { namespace Kullo { namespace Http {

auto HttpClient::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto HttpClient::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).Handle::get();
}

} } }  // namespace ObjCpp::Kullo::Http
